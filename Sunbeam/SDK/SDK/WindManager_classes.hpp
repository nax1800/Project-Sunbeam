#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindManager

#include "Basic.hpp"

#include "ArrayOfWaterMeshWaterBlueprintPairs_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StaticMeshMaterialArrayCombo_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "FlowMapMaterials_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WindManager.WindManager_C
// 0x01A8 (0x0780 - 0x05D8)
class AWindManager_C final : public AFortWindManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05D8(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               WaterInteractionParticle;                          // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EmptyStaticMesh;                                   // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               TopDownCaptureActorOfTheWorld;                     // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D01;                         // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SmallerRenderTargetOrthoWidth;                     // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LargestRenderTargetOrthoWidth;                     // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MidSizedRenderTargetOrthoWidth;                    // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         External_Test_Actor;                               // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          DebugParticleBasedWind;                            // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortStaticMeshActor*>           World_Terrain_Meshes;                              // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Camera_Height_Offset;                              // 0x0640(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Character_Initialized;                             // 0x064C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64D[0x3];                                      // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Particle_Z_Offset;                                 // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate_Grass_Wind_And_Top_Down_Z_Depth_Texture_Renders_Of_the_World; // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Has_Water_Interaction_Enabled_Variable_Been_Set;   // 0x0655(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Water_Interaction_Enabled;                      // 0x0656(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657[0x1];                                      // 0x0657(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticMeshMaterialArrayCombo>  WorldStaticMeshArray;                              // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FArrayOfWaterMeshWaterBlueprintPairs   Array_Of_Water_Assets;                             // 0x0668(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    PrototypicalStaticMeshes;                          // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         Current_Water_Mesh_Index;                          // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFlowMapMaterials>              WaterVectorMatToDefaultMaterialPairing;            // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Render_Water_Maps;                                 // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MaterialPairingFound;                              // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A2[0x6];                                      // 0x06A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WaterLevelMID;                                     // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCharacterIndex;                             // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         World_Capture_Width;                               // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WorldBoundsMinMax;                                 // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Black_Scene_Capture_Material;                      // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista; // 0x06D0(0x001C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StormCylinderMeshes;                               // 0x06F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Storm_Cyl_Mesh_Match;                              // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_701[0x3];                                      // 0x0701(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Wind_Cyl_Mesh_Array_Match_Index;                   // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortWindImpulseCylinder               NewVar_0;                                          // 0x0708(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         Delta_Wind_Falloff_in_World_Units;                 // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      WindMaterialInstance;                              // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Start_Time_Stamp;                            // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_764[0x4];                                      // 0x0764(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortWindImpulseHandle>         Fort_Wind_Impulse_Array;                           // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FFortWindImpulseHandle                 NewVar_1;                                          // 0x0778(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_WindManager(int32 EntryPoint);
	void Update_Test(float NewMagnitude);
	void ReceiveBeginPlay();
	void Add_Wind_Component(class UPrimitiveComponent* InComponent);
	void Play_Water_Splash_Particle_System_At_Location(const struct FTransform& Particle_Transform);
	void SpawnTestWind(float Radius, float ImpulseMagnitude);
	void OnWindImpulseCylinderDeltaComplete(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void OnWindImpulseCylinderDeath(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void OnWindImpulseCylinderCreation(const struct FFortWindImpulseCylinder& WindImpulseCylinder, const struct FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta);
	void AddWindParticleSystemComponent(class UParticleSystemComponent* ParticleSystemComponent);
	void Register_player_for_render_to_texture_purposes(class APlayerPawn_Generic_C* Player_Pawn_Generic);
	void ReceiveTick(float DeltaSeconds);
	void OnWorldReady();
	void Add_Render_To_Texture_Particle(class UParticleSystem* EmitterTemplate, const struct FTransform& InTransform);
	void UserConstructionScript();
	void InitializeOrthoSettings();
	void SetRenderOnlyAssets(class UPrimitiveComponent* InComponent);
	struct FVector Calculate_Camera_Position(float Scale, class USceneCaptureComponent2D* Scene_Capture);
	void UpdateStormWindCylinder(const struct FFortWindImpulseCylinder& Wind_Impulse, const struct FFortWindImpulseCylinderDelta& Wind_Delta);
	void RemoveWindCylinder(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void UpdateWindDeltaCyl(float Static_Cylinder_Outer_Radius, float Duration, class UMaterialInstanceDynamic* Mid, bool Is_Wind_Circular_);
	void SetWindMatVariables(class UMaterialInstanceDynamic* Mid, bool Set_AnimatedCylinderCenter, const struct FVector& AnimatedCylinderCenter, bool Set_Animating_Wind_Magnitude, float Animating_Wind_Magnitude, bool Set_Static_Wind_Magnitude, float Static_Wind_Magnitude, bool Set_CylinderCenter, const struct FVector& CylinderCenter, bool Set_WindVector, const struct FVector& WindVector, bool Set_WindCrossVector, const struct FVector& WindCrossVector, bool Set_OverallOuterRadius, float OverallOuterRadius, bool Set_OverallInnerRadius, float OverallInnerRadius, bool Set_Wind_Still_0_or_Animating_1, float Wind_Still_0_or_Animating_1, bool Set_Circular_Shader_, float Circular_Shader_, bool* NewParam);
	void Find_Matching_Wind_Mesh_Index_And_Write_Bool(const struct FVector& Wind_location, bool* Storm_Cyl_Mesh_Match_0, int32* Wind_Cyl_Mesh_Array_Match_Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WindManager_C">();
	}
	static class AWindManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindManager_C>();
	}
};
static_assert(alignof(AWindManager_C) == 0x000008, "Wrong alignment on AWindManager_C");
static_assert(sizeof(AWindManager_C) == 0x000780, "Wrong size on AWindManager_C");
static_assert(offsetof(AWindManager_C, UberGraphFrame) == 0x0005D8, "Member 'AWindManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterInteractionParticle) == 0x0005E0, "Member 'AWindManager_C::WaterInteractionParticle' has a wrong offset!");
static_assert(offsetof(AWindManager_C, EmptyStaticMesh) == 0x0005E8, "Member 'AWindManager_C::EmptyStaticMesh' has a wrong offset!");
static_assert(offsetof(AWindManager_C, TopDownCaptureActorOfTheWorld) == 0x0005F0, "Member 'AWindManager_C::TopDownCaptureActorOfTheWorld' has a wrong offset!");
static_assert(offsetof(AWindManager_C, SceneCaptureComponent2D01) == 0x0005F8, "Member 'AWindManager_C::SceneCaptureComponent2D01' has a wrong offset!");
static_assert(offsetof(AWindManager_C, DefaultSceneRoot) == 0x000600, "Member 'AWindManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AWindManager_C, SmallerRenderTargetOrthoWidth) == 0x000608, "Member 'AWindManager_C::SmallerRenderTargetOrthoWidth' has a wrong offset!");
static_assert(offsetof(AWindManager_C, LargestRenderTargetOrthoWidth) == 0x00060C, "Member 'AWindManager_C::LargestRenderTargetOrthoWidth' has a wrong offset!");
static_assert(offsetof(AWindManager_C, MidSizedRenderTargetOrthoWidth) == 0x000610, "Member 'AWindManager_C::MidSizedRenderTargetOrthoWidth' has a wrong offset!");
static_assert(offsetof(AWindManager_C, External_Test_Actor) == 0x000618, "Member 'AWindManager_C::External_Test_Actor' has a wrong offset!");
static_assert(offsetof(AWindManager_C, DebugParticleBasedWind) == 0x000628, "Member 'AWindManager_C::DebugParticleBasedWind' has a wrong offset!");
static_assert(offsetof(AWindManager_C, World_Terrain_Meshes) == 0x000630, "Member 'AWindManager_C::World_Terrain_Meshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Camera_Height_Offset) == 0x000640, "Member 'AWindManager_C::Camera_Height_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Character_Initialized) == 0x00064C, "Member 'AWindManager_C::Character_Initialized' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Particle_Z_Offset) == 0x000650, "Member 'AWindManager_C::Particle_Z_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Activate_Grass_Wind_And_Top_Down_Z_Depth_Texture_Renders_Of_the_World) == 0x000654, "Member 'AWindManager_C::Activate_Grass_Wind_And_Top_Down_Z_Depth_Texture_Renders_Of_the_World' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Has_Water_Interaction_Enabled_Variable_Been_Set) == 0x000655, "Member 'AWindManager_C::Has_Water_Interaction_Enabled_Variable_Been_Set' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Is_Water_Interaction_Enabled) == 0x000656, "Member 'AWindManager_C::Is_Water_Interaction_Enabled' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldStaticMeshArray) == 0x000658, "Member 'AWindManager_C::WorldStaticMeshArray' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Array_Of_Water_Assets) == 0x000668, "Member 'AWindManager_C::Array_Of_Water_Assets' has a wrong offset!");
static_assert(offsetof(AWindManager_C, PrototypicalStaticMeshes) == 0x000678, "Member 'AWindManager_C::PrototypicalStaticMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Current_Water_Mesh_Index) == 0x000688, "Member 'AWindManager_C::Current_Water_Mesh_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterVectorMatToDefaultMaterialPairing) == 0x000690, "Member 'AWindManager_C::WaterVectorMatToDefaultMaterialPairing' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Render_Water_Maps) == 0x0006A0, "Member 'AWindManager_C::Render_Water_Maps' has a wrong offset!");
static_assert(offsetof(AWindManager_C, MaterialPairingFound) == 0x0006A1, "Member 'AWindManager_C::MaterialPairingFound' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterLevelMID) == 0x0006A8, "Member 'AWindManager_C::WaterLevelMID' has a wrong offset!");
static_assert(offsetof(AWindManager_C, CurrentCharacterIndex) == 0x0006B0, "Member 'AWindManager_C::CurrentCharacterIndex' has a wrong offset!");
static_assert(offsetof(AWindManager_C, World_Capture_Width) == 0x0006B4, "Member 'AWindManager_C::World_Capture_Width' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldBoundsMinMax) == 0x0006B8, "Member 'AWindManager_C::WorldBoundsMinMax' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Black_Scene_Capture_Material) == 0x0006C8, "Member 'AWindManager_C::Black_Scene_Capture_Material' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista) == 0x0006D0, "Member 'AWindManager_C::Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista' has a wrong offset!");
static_assert(offsetof(AWindManager_C, StormCylinderMeshes) == 0x0006F0, "Member 'AWindManager_C::StormCylinderMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Storm_Cyl_Mesh_Match) == 0x000700, "Member 'AWindManager_C::Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Wind_Cyl_Mesh_Array_Match_Index) == 0x000704, "Member 'AWindManager_C::Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, NewVar_0) == 0x000708, "Member 'AWindManager_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Delta_Wind_Falloff_in_World_Units) == 0x000750, "Member 'AWindManager_C::Delta_Wind_Falloff_in_World_Units' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WindMaterialInstance) == 0x000758, "Member 'AWindManager_C::WindMaterialInstance' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Debug_Start_Time_Stamp) == 0x000760, "Member 'AWindManager_C::Debug_Start_Time_Stamp' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Fort_Wind_Impulse_Array) == 0x000768, "Member 'AWindManager_C::Fort_Wind_Impulse_Array' has a wrong offset!");
static_assert(offsetof(AWindManager_C, NewVar_1) == 0x000778, "Member 'AWindManager_C::NewVar_1' has a wrong offset!");

}

