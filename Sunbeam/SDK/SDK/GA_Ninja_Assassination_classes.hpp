#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Ninja_Assassination

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GAT_NinjaTriggeredAbility_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Ninja_Assassination.GA_Ninja_Assassination_C
// 0x00E0 (0x0BF0 - 0x0B10)
class UGA_Ninja_Assassination_C final : public UGAT_NinjaTriggeredAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Ninja_Assassination_C;           // 0x0B10(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTagContainer                  TC_SwordWeapons;                                   // 0x0B18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventActivation;                                   // 0x0B38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventComplete;                                     // 0x0B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Assassination;                                  // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_WindAndStorm;                                   // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_WindAndStorm;                                   // 0x0B58(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_PainMastery;                                    // 0x0B78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PainMastery;                                    // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_NinjaAbility;                                   // 0x0BA0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_LongSassin;                                     // 0x0BC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LongSassin;                                        // 0x0BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WindAndStorm;                                      // 0x0BE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PainMastery;                                       // 0x0BE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE3[0x5];                                      // 0x0BE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ResetTimerhandle;                                  // 0x0BE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_GA_Ninja_Assassination(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload);
	void ApplyStack();
	void SetupAbility(class UAbilitySystemComponent* AbilitySystem);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Ninja_Assassination_C">();
	}
	static class UGA_Ninja_Assassination_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Ninja_Assassination_C>();
	}
};
static_assert(alignof(UGA_Ninja_Assassination_C) == 0x000008, "Wrong alignment on UGA_Ninja_Assassination_C");
static_assert(sizeof(UGA_Ninja_Assassination_C) == 0x000BF0, "Wrong size on UGA_Ninja_Assassination_C");
static_assert(offsetof(UGA_Ninja_Assassination_C, UberGraphFrame_GA_Ninja_Assassination_C) == 0x000B10, "Member 'UGA_Ninja_Assassination_C::UberGraphFrame_GA_Ninja_Assassination_C' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_SwordWeapons) == 0x000B18, "Member 'UGA_Ninja_Assassination_C::TC_SwordWeapons' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, EventActivation) == 0x000B38, "Member 'UGA_Ninja_Assassination_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, EventComplete) == 0x000B40, "Member 'UGA_Ninja_Assassination_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_Assassination) == 0x000B48, "Member 'UGA_Ninja_Assassination_C::GE_Assassination' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_WindAndStorm) == 0x000B50, "Member 'UGA_Ninja_Assassination_C::GE_WindAndStorm' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_WindAndStorm) == 0x000B58, "Member 'UGA_Ninja_Assassination_C::TC_WindAndStorm' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_PainMastery) == 0x000B78, "Member 'UGA_Ninja_Assassination_C::TC_PainMastery' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_PainMastery) == 0x000B98, "Member 'UGA_Ninja_Assassination_C::GE_PainMastery' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_NinjaAbility) == 0x000BA0, "Member 'UGA_Ninja_Assassination_C::TC_NinjaAbility' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_LongSassin) == 0x000BC0, "Member 'UGA_Ninja_Assassination_C::TC_LongSassin' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, LongSassin) == 0x000BE0, "Member 'UGA_Ninja_Assassination_C::LongSassin' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, WindAndStorm) == 0x000BE1, "Member 'UGA_Ninja_Assassination_C::WindAndStorm' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, PainMastery) == 0x000BE2, "Member 'UGA_Ninja_Assassination_C::PainMastery' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, ResetTimerhandle) == 0x000BE8, "Member 'UGA_Ninja_Assassination_C::ResetTimerhandle' has a wrong offset!");

}

