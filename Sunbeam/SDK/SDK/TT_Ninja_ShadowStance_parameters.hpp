#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_Ninja_ShadowStance

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function TT_Ninja_ShadowStance.TT_Ninja_ShadowStance_C.InitializeAbilityInstanceInternal
// 0x0020 (0x0020 - 0x0000)
struct TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGA_Ninja_ShadowStance_C*               K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal) == 0x000008, "Wrong alignment on TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal");
static_assert(sizeof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal) == 0x000020, "Wrong size on TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal");
static_assert(offsetof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal, Context) == 0x000008, "Member 'TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal::Context' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal, K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance) == 0x000010, "Member 'TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal::K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TT_Ninja_ShadowStance_C_InitializeAbilityInstanceInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function TT_Ninja_ShadowStance.TT_Ninja_ShadowStance_C.GetTextForTokenFromAbilityInstanceInternal
// 0x02D0 (0x02D0 - 0x0000)
struct TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShadowierStanceDamageResist;                       // 0x0040(0x0018)(Edit)
	class FText                                   ShadowStanceDamageResist;                          // 0x0058(0x0018)(Edit)
	class FText                                   MoveLikeShadowDuration;                            // 0x0070(0x0018)(Edit)
	class FText                                   ShadowStanceDuration;                              // 0x0088(0x0018)(Edit)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGA_Ninja_ShadowStance_C*               K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable2;                               // 0x00D0(0x0018)()
	bool                                          Temp_bool_Variable2;                               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable3;                               // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable4;                               // 0x0120(0x0018)()
	bool                                          Temp_bool_Variable3;                               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select2_Default;                            // 0x0140(0x0018)()
	bool                                          Temp_bool_Variable4;                               // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable5;                               // 0x0160(0x0018)()
	class FText                                   Temp_text_Variable6;                               // 0x0178(0x0018)()
	bool                                          Temp_bool_Variable5;                               // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable7;                               // 0x0198(0x0018)()
	class FText                                   K2Node_Select3_Default;                            // 0x01B0(0x0018)()
	class FText                                   Temp_text_Variable8;                               // 0x01C8(0x0018)()
	bool                                          Temp_bool_Variable6;                               // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable9;                               // 0x01E8(0x0018)()
	class FText                                   K2Node_Select4_Default;                            // 0x0200(0x0018)()
	class FText                                   Temp_text_Variable10;                              // 0x0218(0x0018)()
	class FText                                   K2Node_Select5_Default;                            // 0x0230(0x0018)()
	class FText                                   K2Node_Select6_Default;                            // 0x0248(0x0018)()
	bool                                          Temp_bool_Variable7;                               // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable11;                              // 0x0268(0x0018)()
	class FText                                   K2Node_Select7_Default;                            // 0x0280(0x0018)()
	class FText                                   Temp_text_Variable12;                              // 0x0298(0x0018)()
	bool                                          Temp_bool_Variable8;                               // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select8_Default;                            // 0x02B8(0x0018)()
};
static_assert(alignof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal) == 0x000008, "Wrong alignment on TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal");
static_assert(sizeof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal) == 0x0002D0, "Wrong size on TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Tag) == 0x000008, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Tag' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Context) == 0x000010, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Context' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Token) == 0x000018, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Token' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, OutText) == 0x000020, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::OutText' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, ReturnValue) == 0x000038, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, ShadowierStanceDamageResist) == 0x000040, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::ShadowierStanceDamageResist' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, ShadowStanceDamageResist) == 0x000058, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::ShadowStanceDamageResist' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, MoveLikeShadowDuration) == 0x000070, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::MoveLikeShadowDuration' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, ShadowStanceDuration) == 0x000088, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::ShadowStanceDuration' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable) == 0x0000A0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x0000A1, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance) == 0x0000A8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_DynamicCast_AsGA_Ninja_Shadow_Stance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable) == 0x0000B8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable2) == 0x0000D0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable2) == 0x0000E8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select_Default) == 0x0000F0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable3) == 0x000108, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable3' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable4) == 0x000120, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable4' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable3) == 0x000138, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select2_Default) == 0x000140, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable4) == 0x000158, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable5) == 0x000160, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable5' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable6) == 0x000178, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable6' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable5) == 0x000190, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable7) == 0x000198, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable7' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select3_Default) == 0x0001B0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable8) == 0x0001C8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable8' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable6) == 0x0001E0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable9) == 0x0001E8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable9' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select4_Default) == 0x000200, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable10) == 0x000218, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable10' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select5_Default) == 0x000230, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select6_Default) == 0x000248, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select6_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable7) == 0x000260, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable11) == 0x000268, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable11' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select7_Default) == 0x000280, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select7_Default' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_text_Variable12) == 0x000298, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, Temp_bool_Variable8) == 0x0002B0, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_Select8_Default) == 0x0002B8, "Member 'TT_Ninja_ShadowStance_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_Select8_Default' has a wrong offset!");

// Function TT_Ninja_ShadowStance.TT_Ninja_ShadowStance_C.BP_GetTokenizedDescriptionText
// 0x0040 (0x0040 - 0x0000)
struct TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText");
static_assert(sizeof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText) == 0x000040, "Wrong size on TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText, K2Node_MakeArray_Array) == 0x000030, "Member 'TT_Ninja_ShadowStance_C_BP_GetTokenizedDescriptionText::K2Node_MakeArray_Array' has a wrong offset!");

}

